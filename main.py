import telebot
from telebot import types
from search_site import title_url, start_search_site
import smtplib
from price_bid import amount_of_slaughter
from data import password, url_site, email_sender, email_getter
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from counter import counter
import re


def info(message, number_info):
    if number_info == 0:
        with open('./photo/one_time.jpeg', 'rb') as file:
            bot.send_photo(message.chat.id, file,
                           f'<b>{title_url["service"][number_info][0]}:</b>\n'
                           f'{title_url["service"][number_info][1]}', parse_mode='html')
            bot.send_message(message.chat.id, '–£—á—Ç–∏—Ç–µ —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç {:,} —Ä—É–±–ª–µ–π.'
                             .format(title_url["price"][number_info]))
    elif number_info == 1:
        with open('./photo/supportibe.jpeg', 'rb') as file:
            bot.send_photo(message.chat.id, file,
                           f'<b>{title_url["service"][number_info][0]}:</b>\n'
                           f'{title_url["service"][number_info][1]}', parse_mode='html')
        bot.send_message(message.chat.id, '–£—á—Ç–∏—Ç–µ —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç {:,} —Ä—É–±–ª–µ–π.'
                         .format(title_url["price"][number_info]))
    elif number_info == 2:
        with open('./photo/general.jpeg', 'rb') as file:
            bot.send_photo(message.chat.id, file,
                           f'<b>{title_url["service"][number_info][0]}:</b>\n'
                           f'{title_url["service"][number_info][1]}', parse_mode='html')
        bot.send_message(message.chat.id, '–£—á—Ç–∏—Ç–µ —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç {:,} —Ä—É–±–ª–µ–π.'.
                         format(title_url["price"][number_info]))
    elif number_info == 3:
        with open('./photo/repair.jpeg', 'rb') as file:
            bot.send_photo(message.chat.id, file,
                           f'<b>{title_url["service"][number_info][0]}:</b>\n'
                           f'{title_url["service"][number_info][1]}', parse_mode='html')
        bot.send_message(message.chat.id, '–£—á—Ç–∏—Ç–µ —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç {:,} —Ä—É–±–ª–µ–π.'
                         .format(title_url["price"][number_info]))
    elif number_info == 4:
        with open('./photo/emergency.jpeg', 'rb') as file:
            bot.send_photo(message.chat.id, file,
                           f'<b>{title_url["service"][number_info][0]}:</b>\n'
                           f'{title_url["service"][number_info][1]}', parse_mode='html')
        bot.send_message(message.chat.id, '–£—á—Ç–∏—Ç–µ —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç {:,} —Ä—É–±–ª–µ–π.'
                         .format(title_url["price"][number_info]))
    elif number_info == 5:
        bot.send_message(message.chat.id,
                         '<b>–î—Ä—É–≥–æ–µ:</b>\n'
                         '–°–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º', parse_mode='html')


""" MESSAGE TELEGRAM IN EMAIL  """


def send_email(message, orders):
    mess = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n–í–∏–¥ —É—Å–ª—É–≥–∏: {orders['Type_of_cleaning']}\n–ò–º—è: {orders['Name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders['Number']}\n –ü–ª–æ—â–∞–¥—å m2:{orders['Square']}\n" + "–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: {:,} —Ä—É–±–ª–µ–π"
            .format(orders['Summa']))
    bot.send_message(message.chat.id, mess)
    msg = MIMEMultipart()
    msg["Subject"] = f'Telegram –ó–∞—è–≤–∫–∞ ‚Ññ{counter()}'
    msg.attach(MIMEText(mess + '\nlogin telegram: @{}'.format(message.from_user.username)))
    server = smtplib.SMTP("smtp.mail.ru", 587)
    server.starttls()

    server.login(email_sender, password)
    server.sendmail(email_sender, email_getter, msg.as_string())
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ!\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.')
    home_page(message)


"""   SITE    """


def site(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url=url_site))
    with open('./photo/logo.jpg', 'rb') as file:
        bot.send_photo(message.chat.id, file, '–ö–æ–º–ø–∞–Ω–∏—è''\t<b>"Swift Cleaning</b>"',
                       reply_markup=markup, parse_mode='HTML')
    home_page(message)

"""  REVIEW SITE  """

def review_site(message):
    url = 'https://yandex.ru/maps/org/svift_klining/182540269027/?ll=82.978281%2C55.044315&z=13'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url=url))
    with open('./photo/logo2.jpg', 'rb') as file:
        bot.send_photo(message.chat.id, file, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å, –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º!"\n–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –µ—Å–ª–∏'
                                              ' –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤!', reply_markup=markup)
    home_page(message)


""" SUMMA CHECK """


def summ(message, number, choice):
    if message.text.isdigit():
        summa = 0
        square = int(message.text)
        if number == 0:
            summa = square * amount_of_slaughter["–ú—ã—Ç—å—ë –æ–∫–æ–Ω, –±–∞–ª–∫–æ–Ω–æ–≤"]
        elif number == 1:
            summa = square * amount_of_slaughter["–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞"]
        elif number == 2:
            summa = square * amount_of_slaughter["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞"]
        elif number == 3:
            summa = square * amount_of_slaughter["–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"]
        elif number == 4:
            summa = square * amount_of_slaughter["–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –ß–ü"]
        if title_url['price'][number] < summa:
            bot.send_message(message.chat.id, '–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: <b>{:,}</b> —Ä—É–±–ª–µ–π.'.format(summa),
                             parse_mode='html')
            summary_buttons(message, number, summa, square, choice)
        else:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç <b>{:,}</b> —Ä—É–±–ª–µ–π.\n'
                                              '–í–∞—à–∞ —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>{:,}</b> —Ä—É–±–ª–µ–π.'
                             .format(title_url['price'][number], summa), parse_mode='html')
            yes_no_click(message, number, choice)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ —Ü–∏—Ñ—Ä–∞—Ö.')
        yes_no_click(message, number, choice)


"""     CLICK       """


def yes_no_click(message, number, choice):
    if message.text.lower() == '–¥–∞':
        if number == 0:
            sash = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫?')
            bot.register_next_step_handler(sash, summ, number, choice)
        else:
            square_m2 = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤?')
            bot.register_next_step_handler(square_m2, summ, number, choice)
    elif message.text.lower() == '–Ω–µ—Ç':
        cleaning(message)
    else:
        yes_no(message, number, choice)


def on_click(message):
    message_command = ['–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üíª', '–ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É üßπ', '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìñ', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è']
    if message.text == message_command[1]:
        cleaning(message)
    elif message.text == message_command[0]:
        site(message)
    elif message.text == message_command[2]:
        review_site(message)
    elif message.text == message_command[3]:
        info_in_company(message)
        home_page(message)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
        home_page(message)

def specialist(message):
    bot.send_message(message.chat.id,f'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {title_url["company"][0][1]}')

def on_cleaning_click(message):
    command_choice = ['–ú—ã—Ç—å—ë –æ–∫–æ–Ω, –±–∞–ª–∫–æ–Ω–æ–≤', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞', '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞', '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞',
                      '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –ß–ü', '–î—Ä—É–≥–æ–µ', '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
    if message.text == command_choice[0]:
        number = 0
        info(message, number)
        yes_no(message, number, command_choice[0])
    elif message.text == command_choice[1]:
        number = 1
        info(message, number)
        yes_no(message, number, command_choice[1])
    elif message.text == command_choice[2]:
        number = 2
        info(message, number)
        yes_no(message, number, command_choice[2])
    elif message.text == command_choice[3]:
        number = 3
        info(message, number)
        yes_no(message, number, command_choice[3])
    elif message.text == command_choice[4]:
        number = 4
        info(message, number)
        yes_no(message, number, command_choice[4])
    elif message.text == command_choice[5]:
        number = 5
        info(message, number)
        specialist(message)
        cleaning(message)
    elif message.text == command_choice[6]:
        home_page(message)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
        cleaning(message)

"""  DICTIONARY ORDER  """

def list_order(message, number, summa, square, choice, phone, name, orders):
    orders['Number'] = phone
    orders['Name'] = name
    orders['Type_of_cleaning'] = choice
    orders['Summa'] = summa
    orders['Square'] = square


"""    ORDER   """


def order(message, number, summa, square, choice):
    orders = {}
    name_phone = message.text.split()
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        decor(message, number, summa, square, choice)
    elif len(name_phone) == 2:
        name = name_phone[0]
        phone = name_phone[1]
        if (phone.isdigit()) and (len(phone) == 11) and ((phone[0] == '7') or (phone[0] == '8')):
            list_order(message, number, summa, square, choice, phone, name, orders)
            send_email(message, orders)
        else:
            bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            decor(message, number, summa, square, choice)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        decor(message, number, summa, square, choice)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        decor(message, number, summa, square, choice)


def decor(message, number, summa, square, choice):
    if message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É':
        name_phone = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler(name_phone, order, number, summa, square, choice)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        cleaning(message)
    else:
        summary_buttons(message, number, summa, square, choice)


"""   –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö   """


def summary_buttons(message, number, summa, square, choice):
    button = types.ReplyKeyboardMarkup(True)
    button_application = types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É')
    button_edit = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    button.add(button_application, button_edit)
    bot.send_message(message.chat.id, '–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞—è–≤–∫—É?', reply_markup=button)
    bot.register_next_step_handler(message, decor, number, summa, square, choice)


def yes_no(message, number, choice):
    button = types.ReplyKeyboardMarkup(True)
    button_yes = types.InlineKeyboardButton('–î–∞')
    button_no = types.InlineKeyboardButton('–ù–µ—Ç')
    button.add(button_yes, button_no)
    bot.send_message(message.chat.id, '–ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–∫–∞—è —É–±–æ—Ä–∫–∞?', reply_markup=button)
    bot.register_next_step_handler(message, yes_no_click, number, choice)


def cleaning(message):
    button = types.ReplyKeyboardMarkup(True)
    one_time = types.InlineKeyboardButton('–ú—ã—Ç—å—ë –æ–∫–æ–Ω, –±–∞–ª–∫–æ–Ω–æ–≤')
    supportive = types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞')
    button.row(one_time, supportive)
    general = types.InlineKeyboardButton('–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞')
    button.row(general)
    repair = types.InlineKeyboardButton('–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞')
    emergency = types.InlineKeyboardButton('–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –ß–ü')
    button.row(repair, emergency)
    other = types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ')
    edit = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    button.row(other, edit)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–±–æ—Ä–∫–∏.', reply_markup=button)
    bot.register_next_step_handler(message, on_cleaning_click)

"""INFO IN COMPANY"""

def info_in_company(message):
    bot.send_message(message.chat.id, f'<b>–ò—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å:</b>\n'
                f'<b>{title_url["company"][0][0]}:</b>\n{title_url["company"][0][1]}\n\n'
                f'<b>{title_url["company"][1][0]}:</b>\n{title_url["company"][1][1]}\n\n'
                f'<b>{title_url["company"][2][0]}:</b>\n{title_url["company"][2][1]}\n\n'
                f'<b>{title_url["company"][3][0]}:</b>\n{title_url["company"][3][1]}\n\n'
                f'<b>{title_url["company"][4][0]}:</b>\n{title_url["company"][4][1]}\n\n'
                f'<b>{title_url["company"][5][0]}:</b>\n{title_url["company"][5][1]}\n\n',
                parse_mode='html')

def home_page(message):
    markup = types.ReplyKeyboardMarkup(True)
    site_button = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üíª')
    order_cleaning = types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É üßπ')
    review_button = types.InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìñ')
    help_button = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è')
    command = [order_cleaning, site_button, review_button, help_button]
    for i_command in command:
        markup.add(i_command)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏–π.', reply_markup=markup)
    bot.register_next_step_handler(message, on_click)

if __name__ == '__main__':
    bot = telebot.TeleBot('6916933008:AAH8ayE-T40zuKnMKQzfVk_jeVNWr047ins')


    @bot.message_handler(commands=['start'])
    def start_main(message):
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}. –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º!')
        start_search_site()
        home_page(message)


    bot.polling(none_stop=True)
